{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Introduction"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"install/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Installation"},{"location":"install/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"install/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"install/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"usage/circuit/","text":"Circuits Generation of a subcircuit from a circuit localnet = Circuit () localnet . add ( Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nmos\" )) localnet . add ( Mosfet ([ \"out\" , \"in\" , VDD , VDD ], name = \"pmos\" )) test = localnet . into_subckt ( \"TEST_CTK\" , [ \"INPUT\" , \"OUTPUT\" ], {}) Global circuit There is a global circuit called netlist that exists within nimphel.","title":"Circuits"},{"location":"usage/circuit/#circuits","text":"","title":"Circuits"},{"location":"usage/circuit/#generation-of-a-subcircuit-from-a-circuit","text":"localnet = Circuit () localnet . add ( Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nmos\" )) localnet . add ( Mosfet ([ \"out\" , \"in\" , VDD , VDD ], name = \"pmos\" )) test = localnet . into_subckt ( \"TEST_CTK\" , [ \"INPUT\" , \"OUTPUT\" ], {})","title":"Generation of a subcircuit from a circuit"},{"location":"usage/circuit/#global-circuit","text":"There is a global circuit called netlist that exists within nimphel.","title":"Global circuit"},{"location":"usage/component/","text":"Usage Creation of models NMOS = Model ( name = \"nmosfet\" , params = { \"w\" : 0.135 , ... }, ) Creation of components class R ( Component ): def __init__ ( self , ports : Ports , params : Optional [ Params ] = None ): defaults : Params = { \"R\" : 1e3 } user_params = dict ( params ) if params else {} super ( R , self ) . __init__ ( ports , { ** defaults , ** user_params }, name = \"R\" ) def fmt ( self ) -> str : def fmt_net ( net ): return f \"net { net } \" if isinstance ( net , int ) else net ports = \" \" . join ( map ( fmt_net , self . ports )) return f 'R { self . num_id } ( { ports } ) R { self . params [ \"R\" ] } ' class Mosfet ( Component ): def __init__ ( self , ports : Ports , params : Optional [ Params ] = None , name = None ): parameters = params if params else {} super ( Mosfet , self ) . __init__ ( ports , parameters , model = NMOS , name = name ) Wrapper for simple components @simple_component class C ( Component ): defaults : Params = { \"C\" : 1e3 , \"T\" : None }","title":"Components"},{"location":"usage/component/#usage","text":"","title":"Usage"},{"location":"usage/component/#creation-of-models","text":"NMOS = Model ( name = \"nmosfet\" , params = { \"w\" : 0.135 , ... }, )","title":"Creation of models"},{"location":"usage/component/#creation-of-components","text":"class R ( Component ): def __init__ ( self , ports : Ports , params : Optional [ Params ] = None ): defaults : Params = { \"R\" : 1e3 } user_params = dict ( params ) if params else {} super ( R , self ) . __init__ ( ports , { ** defaults , ** user_params }, name = \"R\" ) def fmt ( self ) -> str : def fmt_net ( net ): return f \"net { net } \" if isinstance ( net , int ) else net ports = \" \" . join ( map ( fmt_net , self . ports )) return f 'R { self . num_id } ( { ports } ) R { self . params [ \"R\" ] } ' class Mosfet ( Component ): def __init__ ( self , ports : Ports , params : Optional [ Params ] = None , name = None ): parameters = params if params else {} super ( Mosfet , self ) . __init__ ( ports , parameters , model = NMOS , name = name )","title":"Creation of components"},{"location":"usage/component/#wrapper-for-simple-components","text":"@simple_component class C ( Component ): defaults : Params = { \"C\" : 1e3 , \"T\" : None }","title":"Wrapper for simple components"},{"location":"usage/exporter/","text":"Exporter class Exporter : \"\"\"Interface for a Exporter.\"\"\" def fmt_component ( self , comp ) -> str : \"\"\"Format a component instance.\"\"\" raise NotImplementedError def fmt_subckt ( self , subckt ) -> str : \"\"\"Format a subcircuit definition.\"\"\" raise NotImplementedError def fmt_net ( self , net ) -> str : \"\"\"Format a net.\"\"\" raise NotImplementedError","title":"Exporters"},{"location":"usage/exporter/#exporter","text":"class Exporter : \"\"\"Interface for a Exporter.\"\"\" def fmt_component ( self , comp ) -> str : \"\"\"Format a component instance.\"\"\" raise NotImplementedError def fmt_subckt ( self , subckt ) -> str : \"\"\"Format a subcircuit definition.\"\"\" raise NotImplementedError def fmt_net ( self , net ) -> str : \"\"\"Format a net.\"\"\" raise NotImplementedError","title":"Exporter"},{"location":"usage/manipulation/","text":"Manipulation Supposing python Res = R([VDD, net()], {\"R\": random.randint(10, 1_000)}) Chain components Chained components start in the component input and generate a chain in the following way: (in, out) -> (out, net()) -> ... (net(), net()) netlist . add ( Res * 3 ) Components in parallel Components in parallel share the same input and output ports. netlist . add ( Res | 5 ) Self loop A self loop creates a copy of the component and reverses the order of the ports, that is, input is connected to output and viceversa. netlist . add ( ~ Res ) Same input different output netlist . add ( Res ^ 10 ) Different input same output netlist . add ( Res & 10 ) Manipulation on complex components For components that are more complex, there are methods to defined the connections. The ports for chains are defined using masks, that is, a tuple whose non null positions mark the number of ports to chain. A chain will not work in this case with a Mosfet since the chain will be done, with the ports \"out\" and \"GND\". We need to define the chain using the first and second port. m = Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nsvtlp\" ) m . chain (( 1 , 1 , 0 , 0 ), 3 ) Generation of arrays Components can be generated in arrays. These arrays can be 1D or 2D. num_y = 3 num_x = 5 def ports_res ( p ): x , y = p return [ f \"Y_ { y } \" , f \"X_ { x } \" ] arr = array (( 3 , 5 ), R ([ \"\" , \"\" ]), ports_fn = ports_res ) for y , x in np . ndindex ( m . shape ): print ( m [ y , x ]) netlist . add ( m )","title":"Manipulation"},{"location":"usage/manipulation/#manipulation","text":"Supposing python Res = R([VDD, net()], {\"R\": random.randint(10, 1_000)})","title":"Manipulation"},{"location":"usage/manipulation/#chain-components","text":"Chained components start in the component input and generate a chain in the following way: (in, out) -> (out, net()) -> ... (net(), net()) netlist . add ( Res * 3 )","title":"Chain components"},{"location":"usage/manipulation/#components-in-parallel","text":"Components in parallel share the same input and output ports. netlist . add ( Res | 5 )","title":"Components in parallel"},{"location":"usage/manipulation/#self-loop","text":"A self loop creates a copy of the component and reverses the order of the ports, that is, input is connected to output and viceversa. netlist . add ( ~ Res )","title":"Self loop"},{"location":"usage/manipulation/#same-input-different-output","text":"netlist . add ( Res ^ 10 )","title":"Same input different output"},{"location":"usage/manipulation/#different-input-same-output","text":"netlist . add ( Res & 10 )","title":"Different input same output"},{"location":"usage/manipulation/#manipulation-on-complex-components","text":"For components that are more complex, there are methods to defined the connections. The ports for chains are defined using masks, that is, a tuple whose non null positions mark the number of ports to chain. A chain will not work in this case with a Mosfet since the chain will be done, with the ports \"out\" and \"GND\". We need to define the chain using the first and second port. m = Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nsvtlp\" ) m . chain (( 1 , 1 , 0 , 0 ), 3 )","title":"Manipulation on complex components"},{"location":"usage/manipulation/#generation-of-arrays","text":"Components can be generated in arrays. These arrays can be 1D or 2D. num_y = 3 num_x = 5 def ports_res ( p ): x , y = p return [ f \"Y_ { y } \" , f \"X_ { x } \" ] arr = array (( 3 , 5 ), R ([ \"\" , \"\" ]), ports_fn = ports_res ) for y , x in np . ndindex ( m . shape ): print ( m [ y , x ]) netlist . add ( m )","title":"Generation of arrays"},{"location":"usage/subcircuit/","text":"Subcircuits inv = Subckt ( \"INV\" , [ \"vdd\" , \"gnd\" , \"in\" , \"out\" ], { \"vthp\" : None , \"vthn\" : None , \"lp\" : 0.06 , \"ln\" : 0.06 }, ) inv . add ( Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nmos\" )) inv . add ( Mosfet ([ \"out\" , \"in\" , VDD , VDD ], name = \"pmos\" )) inv . fix ()","title":"Subcircuits"},{"location":"usage/subcircuit/#subcircuits","text":"inv = Subckt ( \"INV\" , [ \"vdd\" , \"gnd\" , \"in\" , \"out\" ], { \"vthp\" : None , \"vthn\" : None , \"lp\" : 0.06 , \"ln\" : 0.06 }, ) inv . add ( Mosfet ([ \"out\" , \"in\" , GND , GND ], name = \"nmos\" )) inv . add ( Mosfet ([ \"out\" , \"in\" , VDD , VDD ], name = \"pmos\" )) inv . fix ()","title":"Subcircuits"}]}